import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  Pressable,
  Alert,
  ScrollView,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { useWalletStore } from '../store/walletStore';
import { isValidSolanaAddress } from '../utils/solana';

export default function SendScreen({ navigation }: any) {
  const [toAddress, setToAddress] = useState('');
  const [amount, setAmount] = useState('');
  const [loading, setLoading] = useState(false);
  const {
    balance,
    solanaPrice,
    sendTransaction,
    refreshBalance,
    refreshPrice
  } = useWalletStore();

  useEffect(() => {
    refreshPrice();
  }, []);

  const usdValue = parseFloat(amount || '0') * solanaPrice;
  const isValidAmount = parseFloat(amount || '0') > 0 && parseFloat(amount || '0') <= balance;
  const isValidAddress = isValidSolanaAddress(toAddress);

  const handleSend = async () => {
    if (!isValidAddress) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
      return;
    }

    if (!isValidAmount) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
      return;
    }

    Alert.alert(
      '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
      `–û—Ç–ø—Ä–∞–≤–∏—Ç—å ${amount} SOL –Ω–∞ –∞–¥—Ä–µ—Å ${toAddress.slice(0, 8)}...${toAddress.slice(-8)}?`,
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
          onPress: async () => {
            setLoading(true);
            try {
              const signature = await sendTransaction(toAddress, parseFloat(amount));
              Alert.alert(
                '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
                `Signature: ${signature.slice(0, 8)}...${signature.slice(-8)}`,
                [
                  {
                    text: 'OK',
                    onPress: () => navigation.goBack(),
                  },
                ]
              );
            } catch (error) {
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
            } finally {
              setLoading(false);
            }
          },
        },
      ]
    );
  };

  const handleMaxAmount = () => {
    const maxAmount = Math.max(0, balance - 0.001);
    setAmount(maxAmount.toString());
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        <View style={styles.header}>
          <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>
            <Text style={styles.backText}>‚Üê –ù–∞–∑–∞–¥</Text>
          </Pressable>
          <Text style={styles.title}>üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å SOL</Text>
        </View>

        <View style={styles.balanceContainer}>
          <Text style={styles.balanceLabel}>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</Text>
          <Text style={styles.balanceValue}>{balance.toFixed(4)} SOL</Text>
          {solanaPrice > 0 && (
            <Text style={styles.balanceUsd}>
              ‚âà ${(balance * solanaPrice).toFixed(2)} USD
            </Text>
          )}
        </View>

        <View style={styles.inputContainer}>
          <Text style={styles.inputLabel}>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è</Text>
          <TextInput
            style={[
              styles.textInput,
              styles.addressInput,
              !isValidAddress && toAddress.length > 0 && styles.invalidInput,
            ]}
            value={toAddress}
            onChangeText={setToAddress}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å Solana –∫–æ—à–µ–ª—å–∫–∞"
            placeholderTextColor="#8892b0"
            multiline
          />
          {!isValidAddress && toAddress.length > 0 && (
            <Text style={styles.errorText}>–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å Solana</Text>
          )}
        </View>

        <View style={styles.inputContainer}>
          <View style={styles.amountHeader}>
            <Text style={styles.inputLabel}>–°—É–º–º–∞ (SOL)</Text>
            <Pressable onPress={handleMaxAmount} style={styles.maxButton}>
              <Text style={styles.maxText}>–ú–∞–∫—Å–∏–º—É–º</Text>
            </Pressable>
          </View>
          <TextInput
            style={[
              styles.textInput,
              styles.amountInput,
              !isValidAmount && amount.length > 0 && styles.invalidInput,
            ]}
            value={amount}
            onChangeText={setAmount}
            placeholder="0.0000"
            placeholderTextColor="#8892b0"
            keyboardType="numeric"
          />
          {amount && !isNaN(parseFloat(amount)) && solanaPrice > 0 && (
            <Text style={styles.usdText}>‚âà ${usdValue.toFixed(2)} USD</Text>
          )}
          {!isValidAmount && amount.length > 0 && (
            <Text style={styles.errorText}>
              –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞
            </Text>
          )}
        </View>

        <View style={styles.feeContainer}>
          <Text style={styles.feeTitle}>üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∏—Å—Å–∏–∏</Text>
          <Text style={styles.feeText}>
            ‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏: ~0.000005 SOL{'\n'}
            ‚Ä¢ –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: 1-2 —Å–µ–∫—É–Ω–¥—ã{'\n'}
            ‚Ä¢ –°–µ—Ç—å: Solana Devnet (—Ç–µ—Å—Ç–æ–≤–∞—è)
          </Text>
        </View>

        <Pressable
          style={[
            styles.sendButton,
            (!isValidAddress || !isValidAmount || loading) && styles.disabledButton,
          ]}
          onPress={handleSend}
          disabled={!isValidAddress || !isValidAmount || loading}
        >
          <Text style={styles.sendButtonText}>
            {loading ? '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...' : 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
          </Text>
        </Pressable>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0f0f23',
  },
  scrollContainer: {
    paddingBottom: 40,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 24,
    paddingTop: 60,
    paddingBottom: 20,
  },
  backButton: {
    marginRight: 16,
  },
  backText: {
    fontSize: 16,
    color: '#00ff88',
    fontWeight: '600',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#ccd6f6',
    flex: 1,
  },
  balanceContainer: {
    backgroundColor: '#1a1a3a',
    marginHorizontal: 24,
    marginBottom: 24,
    padding: 20,
    borderRadius: 16,
    borderWidth: 1,
    borderColor: '#2d2d5a',
    alignItems: 'center',
  },
  balanceLabel: {
    fontSize: 14,
    color: '#8892b0',
    marginBottom: 8,
  },
  balanceValue: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#00ff88',
    marginBottom: 4,
  },
  balanceUsd: {
    fontSize: 16,
    color: '#64ffda',
  },
  inputContainer: {
    marginHorizontal: 24,
    marginBottom: 24,
  },
  inputLabel: {
    fontSize: 16,
    color: '#ccd6f6',
    marginBottom: 12,
    fontWeight: '600',
  },
  textInput: {
    backgroundColor: '#1a1a3a',
    borderWidth: 1,
    borderColor: '#2d2d5a',
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    color: '#ccd6f6',
  },
  addressInput: {
    minHeight: 80,
    textAlignVertical: 'top',
  },
  amountInput: {
    fontSize: 20,
    textAlign: 'center',
  },
  invalidInput: {
    borderColor: '#ff4757',
  },
  amountHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  maxButton: {
    backgroundColor: '#2d2d5a',
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 6,
  },
  maxText: {
    color: '#64ffda',
    fontSize: 12,
    fontWeight: '600',
  },
  usdText: {
    fontSize: 14,
    color: '#8892b0',
    textAlign: 'center',
    marginTop: 8,
  },
  errorText: {
    fontSize: 12,
    color: '#ff4757',
    marginTop: 4,
  },
  feeContainer: {
    backgroundColor: '#1a1a3a',
    marginHorizontal: 24,
    marginBottom: 24,
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#2d2d5a',
  },
  feeTitle: {
    fontSize: 14,
    color: '#ccd6f6',
    fontWeight: '600',
    marginBottom: 8,
  },
  feeText: {
    fontSize: 12,
    color: '#8892b0',
    lineHeight: 18,
  },
  sendButton: {
    backgroundColor: '#00ff88',
    marginHorizontal: 24,
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  disabledButton: {
    backgroundColor: '#2d2d5a',
  },
  sendButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#0f0f23',
  },
});